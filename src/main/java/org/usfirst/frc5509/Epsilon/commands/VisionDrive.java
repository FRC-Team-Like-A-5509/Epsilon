// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5509.Epsilon.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5509.Epsilon.Robot;

/**
 *
 */
public class VisionDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public VisionDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //If the target is above the crosshair, we are too close, move back
        //If the target is below the crosshair, we aren't close enough, move forward
        //If the target is to the left of the crosshair, we are too far to the left, move right
        //If the target is to the right of the crosshair, we are too far to the right, move left 
        float Kp = -0.1f;  // Proportional control constant
        float min_command = 0.05f;

        float tx = LimelightVision.getXInDegrees();
        float ty = LimelightVision.getyInDegrees();

        if (joystick->GetRawButton(9)){
            float heading_error = tx;
            float x_adjust = 0.0f; //uses the x values, determines side to side movement
            float y_adjust = 0.0f; //uses the y values, determines front to back movement

            if (tx > 1.0){
                x_adjust = Kp*heading_error - min_command;
            }
            else if (tx < 1.0){
                x_adjust = Kp*heading_error + min_command;
            }

            if (ty > 1.0){
                y_adjust = Kp*heading_error - min_command;
            }
            else if (ty < 1.0){
                y_adjust = Kp*heading_error + min_command;
            }

            left_command += x_adjust;
            right_command -= x_adjust;
            forward_command += y_adjust;
            reverse_command -= y_adjust;
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
